List<String> agencyNames = new List<String>{      'Abacaxi Inc', 'Banana Inc', 'Cereja Inc', 'Damasco Inc', 'Figo Inc', 'Goiaba Inc',          'Laranja Inc', 'Manga Inc', 'Melancia Inc', 'Uva Inc', 'Pera Inc', 'Morango Inc',         'Kiwi Inc', 'Amora Inc', 'Framboesa Inc', 'Coco Inc', 'Maracuja Inc', 'Abobora Inc',         'Melão Inc', 'Tamarindo Inc'  };       Map<String, String> accountNumberMap = new Map<String, String>{      'Abacaxi Inc' => '20001', 'Abobora Inc' => '20002', 'Amora Inc' => '20003',      'Banana Inc' => '20004', 'Cereja Inc' => '20005', 'Coco Inc' => '20006',      'Damasco Inc' => '20007', 'Figo Inc' => '20008', 'Framboesa Inc' => '20009',      'Goiaba Inc' => '20010', 'Kiwi Inc' => '20011', 'Laranja Inc' => '20012',      'Manga Inc' => '20013', 'Maracuja Inc' => '20014', 'Melancia Inc' => '20015',      'Melão Inc' => '20016', 'Morango Inc' => '20017', 'Pera Inc' => '20018',      'Tamarindo Inc' => '20019', 'Uva Inc' => '20020'  };  List<Map<String, Object>> citiesWithState = new List<Map<String, Object>>{      new Map<String, Object>{'city' => 'São Paulo', 'state' => 'São Paulo'},      new Map<String, Object>{'city' => 'Santo André', 'state' => 'São Paulo'},      new Map<String, Object>{'city' => 'Guarulhos', 'state' => 'São Paulo'},      new Map<String, Object>{'city' => 'Osasco', 'state' => 'São Paulo'}  };  List<String> firstNames = new List<String>{      'Alice', 'Breno', 'Cecília', 'Diego', 'Ester', 'Felipe', 'Gabriela', 'Hugo', 'Isabela', 'João',           'Katia', 'Leonardo', 'Manuela', 'Nicolas', 'Olívia', 'Pedro', 'Quênia', 'Rafael', 'Sofia', 'Thiago',           'Ursula', 'Vitória', 'William', 'Xavier', 'Yasmin', 'Zion'       };  List<String> lastNames = new List<String>{      'Almeida', 'Barbosa', 'Cardoso', 'Dias', 'Fernandes', 'Garcia', 'Henrique', 'Lacerda', 'Martins', 'Neves',           'Oliveira', 'Ferreira', 'Queiroz', 'Rezende', 'Silva', 'Teixeira', 'Vieira', 'Xavier', 'Yamada', 'Zanetti'       };  List<String> opportunityStages = new List<String>{      'Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers',           'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'       };  List<String> opportunityTypes = new List<String>{      'New Business', 'Existing Business'       };  String generateRandomFirstName() {           return firstNames[Math.mod(Math.abs(Crypto.getRandomInteger()), firstNames.size())];       }  String generateRandomLastName() {           return lastNames[Math.mod(Math.abs(Crypto.getRandomInteger()), lastNames.size())];       }  Date generateRandomCloseDate() {           Integer daysToAdd = Math.mod(Math.abs(Crypto.getRandomInteger()), 730) + 1;          return Date.today().addDays(daysToAdd);       }  Decimal generateRandomAmount() {           return 1000 + Math.mod(Math.abs(Crypto.getRandomInteger()), 49000);       }  Map<String, Object> getRandomCityWithState() {         return citiesWithState[Math.mod(Math.abs(Crypto.getRandomInteger()), citiesWithState.size())];     }  List<Account> accountsToInsert = new List<Account>();       for (String agencyName : agencyNames) {           Map<String, Object> cityData = getRandomCityWithState();         Account acc = new Account(               Name = agencyName,               AccountNumber = accountNumberMap.get(agencyName),          BillingCity = (String)cityData.get('city'),               BillingState = (String)cityData.get('state'),               BillingCountry = 'Brasil'           );           accountsToInsert.add(acc);       }       insert accountsToInsert;       List<Contact> contactsToInsert = new List<Contact>();       for (Integer i = 0; i < 100; i++) {           Account randomAccount = accountsToInsert[Math.mod(Math.abs(Crypto.getRandomInteger()), accountsToInsert.size())];           Contact con = new Contact(               FirstName = generateRandomFirstName(),               LastName = generateRandomLastName(),               AccountId = randomAccount.Id           );           contactsToInsert.add(con);       }       insert contactsToInsert;       Map<Id, Id> contactAccountMap = new Map<Id, Id>();       for (Contact con : contactsToInsert) {           contactAccountMap.put(con.Id, con.AccountId);       }       List<Opportunity> opportunitiesToInsert = new List<Opportunity>();       for (Integer i = 0; i < 1000; i++) {           Id randomContactId = contactsToInsert[Math.mod(Math.abs(Crypto.getRandomInteger()), contactsToInsert.size())].Id;           Id accountId = contactAccountMap.get(randomContactId);           String stageName = opportunityStages[Math.mod(Math.abs(Crypto.getRandomInteger()), opportunityStages.size())];           String type = opportunityTypes[Math.mod(Math.abs(Crypto.getRandomInteger()), opportunityTypes.size())];           Date closeDate = generateRandomCloseDate();           Decimal amount = generateRandomAmount();           Opportunity opp = new Opportunity(               Name = 'Opportunity ' + (i+1),               CloseDate = closeDate,               StageName = stageName,               Type = type,               Amount = amount,               AccountId = accountId,               ContactId = randomContactId           );           opportunitiesToInsert.add(opp);       }       insert opportunitiesToInsert;  